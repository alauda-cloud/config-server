server:
  port: 8080
  undertow:
    max-http-post-size: 0
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
    io-threads: 4
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
    worker-threads: 32
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    #   buffers-per-region: 1024 # 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true
spring:
  application:
    name: config-server
  cloud:
    config:
      server:
        health.enabled: false
        git:
          uri: https://github.com/alauda-cloud/config-repo.git
          force-pull: true
          searchPaths: '{application}'
          clone-on-start: true
eureka:
  host: 127.0.0.1
  port: 8761
  username: discovery
  password: 3GfhPZQifTpVcu
  client:
    service-url:
      defaultZone: http://${eureka.username}:${eureka.password}@${eureka.host}:${eureka.port}/eureka
---
spring:
  profiles: default
server:
  port: 8001
eureka:
  host: 127.0.0.1
---
spring:
  profiles: dev
eureka:
  host: eureka-server
---
spring:
  profiles: prd
eureka:
  host: eureka-server